@page "/auth/login"
@inject IAuthService AuthService
@inject TokenAuthProvider Provider
@inject NavigationManager NavigationManager



<div class="card">
    <div class="card-body">
        <h3>Login</h3>
            @if (Errors != null)
            {

                <div class="col-sm-12 text-danger">
                    @foreach (var error in Errors)
                    {
                        <span class="col-sm-12">@error</span>
                    }
                </div>
            }
            <EditForm Model="loginRequest" OnValidSubmit="SubmitLogin">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Email</label>
                    <InputText class="form-control" @bind-Value="loginRequest.Email" />
                    <ValidationMessage For="@(()=> loginRequest.Email)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText class="form-control" type="password" @bind-Value="loginRequest.Password" />
                    <ValidationMessage For="@(()=> loginRequest.Password)" />
                </div>

                <button type="submit" class="btn btn-outline-primary btn-sm">Login</button>
            </EditForm>
        </div>
</div>

@code {
    private LoginRequest loginRequest = new LoginRequest();
    private IEnumerable<string> Errors { get; set; }

    protected override void OnInitialized()
    {
        loginRequest.Email = "test@gmail.com";
        loginRequest.Password = "password";
    }


    private async Task SubmitLogin()
    {
        // Login via api and save token and expiry date
        // Provider.SetToken()

        var response = await AuthService.UserSignIn(loginRequest);
        if (response.Errors == null || response.Errors.Count() < 1)
        {
            if(response.Status == 200)
            {
                await Provider.SetTokenAsync(response.Token, response.TokenExpiry);
                NavigationManager.NavigateTo("/", true);
            }

        }
        else
        {
            //Handle error array
            Errors = response.Errors;
        }
    }
}
