@page "/auth/login"
@inject HttpProvider Http
@inject TokenAuthProvider Provider
@inject NavigationManager NavigationManager


<div class="card">
    <div class="card-body">
        <h3>Login</h3>
        <div class="col-sm-12 text-danger">
            @if (Errors != null)
            {

                //Display errors
                foreach (var error in Errors)
                {
                    <span class="col-sm-12">@error</span>
                }
            }
        </div>
            <EditForm Model="loginViewModel" OnValidSubmit="SubmitLogin">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Email</label>
                    <InputText class="form-control" @bind-Value="loginViewModel.Email" />
                    <ValidationMessage For="@(()=> loginViewModel.Email)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText class="form-control" type="password" @bind-Value="loginViewModel.Password" />
                    <ValidationMessage For="@(()=> loginViewModel.Password)" />
                </div>

                <button type="submit" class="btn btn-outline-primary btn-sm">Login</button>
            </EditForm>
        </div>
</div>

@code {
    private LoginViewModel loginViewModel = new LoginViewModel();
    private IEnumerable<string> Errors { get; set; }

    protected override void OnInitialized()
    {
        loginViewModel.Email = "test@gmail.com";
        loginViewModel.Password = "password";
    }


    private async Task SubmitLogin()
    {
        // Login via api and save token and expiry date
        // Provider.SetToken()

        var response = await Http.PostAsync<LoginResponse>("api/auth/login", loginViewModel);
        if (response.Errors == null || response.Errors.Count() < 1)
        {
            if(response.Status == System.Net.HttpStatusCode.OK)
            {
                await Provider.SetTokenAsync(response.Token, response.TokenExpiry);
                NavigationManager.NavigateTo("/", true);
            }

        }
        else
        {
            //Handle error array
            Errors = response.Errors;
        }
    }
}
